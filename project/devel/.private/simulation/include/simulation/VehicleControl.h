// Generated by gencpp from file simulation/VehicleControl.msg
// DO NOT EDIT!


#ifndef SIMULATION_MESSAGE_VEHICLECONTROL_H
#define SIMULATION_MESSAGE_VEHICLECONTROL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace simulation
{
template <class ContainerAllocator>
struct VehicleControl_
{
  typedef VehicleControl_<ContainerAllocator> Type;

  VehicleControl_()
    : Throttle(0.0)
    , Steering(0.0)
    , Brake(0.0)
    , Reserved(0.0)  {
    }
  VehicleControl_(const ContainerAllocator& _alloc)
    : Throttle(0.0)
    , Steering(0.0)
    , Brake(0.0)
    , Reserved(0.0)  {
  (void)_alloc;
    }



   typedef float _Throttle_type;
  _Throttle_type Throttle;

   typedef float _Steering_type;
  _Steering_type Steering;

   typedef float _Brake_type;
  _Brake_type Brake;

   typedef float _Reserved_type;
  _Reserved_type Reserved;





  typedef boost::shared_ptr< ::simulation::VehicleControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::simulation::VehicleControl_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleControl_

typedef ::simulation::VehicleControl_<std::allocator<void> > VehicleControl;

typedef boost::shared_ptr< ::simulation::VehicleControl > VehicleControlPtr;
typedef boost::shared_ptr< ::simulation::VehicleControl const> VehicleControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::simulation::VehicleControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::simulation::VehicleControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::simulation::VehicleControl_<ContainerAllocator1> & lhs, const ::simulation::VehicleControl_<ContainerAllocator2> & rhs)
{
  return lhs.Throttle == rhs.Throttle &&
    lhs.Steering == rhs.Steering &&
    lhs.Brake == rhs.Brake &&
    lhs.Reserved == rhs.Reserved;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::simulation::VehicleControl_<ContainerAllocator1> & lhs, const ::simulation::VehicleControl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace simulation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::simulation::VehicleControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simulation::VehicleControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simulation::VehicleControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simulation::VehicleControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simulation::VehicleControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simulation::VehicleControl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::simulation::VehicleControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0d66040a38beac1d32107b24d8aabeae";
  }

  static const char* value(const ::simulation::VehicleControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0d66040a38beac1dULL;
  static const uint64_t static_value2 = 0x32107b24d8aabeaeULL;
};

template<class ContainerAllocator>
struct DataType< ::simulation::VehicleControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "simulation/VehicleControl";
  }

  static const char* value(const ::simulation::VehicleControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::simulation::VehicleControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 Throttle\n"
"float32 Steering\n"
"float32 Brake\n"
"float32 Reserved\n"
;
  }

  static const char* value(const ::simulation::VehicleControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::simulation::VehicleControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Throttle);
      stream.next(m.Steering);
      stream.next(m.Brake);
      stream.next(m.Reserved);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::simulation::VehicleControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::simulation::VehicleControl_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "Throttle: ";
    Printer<float>::stream(s, indent + "  ", v.Throttle);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "Steering: ";
    Printer<float>::stream(s, indent + "  ", v.Steering);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "Brake: ";
    Printer<float>::stream(s, indent + "  ", v.Brake);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "Reserved: ";
    Printer<float>::stream(s, indent + "  ", v.Reserved);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIMULATION_MESSAGE_VEHICLECONTROL_H
